{"version":3,"sources":["Types/SortType.ts","App.tsx","Helpers/getReorderedGoods.ts","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","setVisibleGoods","useEffect","reorderGoods","goods","reverse","sort","a","b","ALPHABET","localeCompare","LENGTH","length","getReorderedGoods","changeSortType","sortBy","className","type","classNames","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sEAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,2BCOCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCL,mBAASF,GAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,IAAMC,ECvBH,SACLC,EADK,GAGJ,IADCN,EACF,EADEA,SAAUH,EACZ,EADYA,WAEZ,GAAIG,IAAaP,EAASM,KACxB,OAAOF,EACH,YAAIS,GAAOC,UACXD,EAGN,IAAMJ,EAAe,YAAII,GACtBE,MAAK,SAACC,EAAGC,GACR,OAAQV,GACN,KAAKP,EAASkB,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKjB,EAASoB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAIf,OAAOjB,EACHK,EAAaK,UACbL,EDDmBa,CACnBrB,EAAiB,CACfM,WACAH,eAIJM,EAAgBE,KACf,CAACR,EAAYG,IAEhB,IAAMgB,EAAiB,SAACC,GACtBhB,EAAYgB,IAYd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,aAAc,CACZ,WAAYpB,IAAaP,EAASkB,WAGtCU,QAAS,kBAAML,EAAevB,EAASkB,WARzC,iCAaA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aAAc,CACZ,WAAYpB,IAAaP,EAASoB,SAGtCQ,QAAS,kBAAML,EAAevB,EAASoB,SARzC,4BAaA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aAAc,CACZ,YAAavB,IAGjBwB,QA9Cc,WACpBvB,GAAc,SAACwB,GAAD,OAAWA,MAqCrB,sBAaEtB,IAAaP,EAASM,MAAQF,IAC9B,wBACEsB,KAAK,SACLD,UAAU,4BACVG,QAnDQ,WAChBpB,EAAYR,EAASM,MACrBD,GAAc,IA8CR,sBAUJ,6BACGI,EAAaqB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YErGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.121894a1.chunk.js","sourcesContent":["export enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { SortType } from './Types/SortType';\nimport { getReorderedGoods } from './Helpers/getReorderedGoods';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [visibleGoods, setVisibleGoods] = useState(goodsFromServer);\n\n  useEffect(() => {\n    const reorderGoods = getReorderedGoods(\n      goodsFromServer, {\n        sortType,\n        isReversed,\n      },\n    );\n\n    setVisibleGoods(reorderGoods);\n  }, [isReversed, sortType]);\n\n  const changeSortType = (sortBy: SortType) => {\n    setSortType(sortBy);\n  };\n\n  const changeOrderBy = () => {\n    setIsReversed((prev) => !prev);\n  };\n\n  const resetSort = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning', {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => changeSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning', {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => changeSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning', {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={changeOrderBy}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetSort}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { ReorderOptions } from '../Types/ReorderOptions';\nimport { SortType } from '../Types/SortType';\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  if (sortType === SortType.NONE) {\n    return isReversed\n      ? [...goods].reverse()\n      : goods;\n  }\n\n  const visibleGoods = [...goods]\n    .sort((a, b) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return a.localeCompare(b);\n        case SortType.LENGTH:\n          return a.length - b.length;\n        default:\n          return 0;\n      }\n    });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}